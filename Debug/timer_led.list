
timer_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800472c  0800472c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800472c  0800472c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800472c  0800472c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000000c  08004744  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004744  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c41  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002974  00000000  00000000  00034cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d71  00000000  00000000  00038770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac5c  00000000  00000000  000394e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012025  00000000  00000000  0005413d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091c58  00000000  00000000  00066162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048d0  00000000  00000000  000f7dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000fc68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080046e8 	.word	0x080046e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080046e8 	.word	0x080046e8

0800014c <DWT_Delay_ms>:
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
}

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000154:	4b0e      	ldr	r3, [pc, #56]	; (8000190 <DWT_Delay_ms+0x44>)
 8000156:	685b      	ldr	r3, [r3, #4]
 8000158:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 800015a:	f002 fad3 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 800015e:	4603      	mov	r3, r0
 8000160:	4a0c      	ldr	r2, [pc, #48]	; (8000194 <DWT_Delay_ms+0x48>)
 8000162:	fba2 2303 	umull	r2, r3, r2, r3
 8000166:	099b      	lsrs	r3, r3, #6
 8000168:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	68ba      	ldr	r2, [r7, #8]
 800016e:	fb02 f303 	mul.w	r3, r2, r3
 8000172:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8000174:	bf00      	nop
 8000176:	4b06      	ldr	r3, [pc, #24]	; (8000190 <DWT_Delay_ms+0x44>)
 8000178:	685a      	ldr	r2, [r3, #4]
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	1ad2      	subs	r2, r2, r3
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	429a      	cmp	r2, r3
 8000182:	d3f8      	bcc.n	8000176 <DWT_Delay_ms+0x2a>
}
 8000184:	bf00      	nop
 8000186:	bf00      	nop
 8000188:	3710      	adds	r7, #16
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	e0001000 	.word	0xe0001000
 8000194:	10624dd3 	.word	0x10624dd3

08000198 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	807b      	strh	r3, [r7, #2]
 80001a4:	4613      	mov	r3, r2
 80001a6:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 80001a8:	787a      	ldrb	r2, [r7, #1]
 80001aa:	887b      	ldrh	r3, [r7, #2]
 80001ac:	4619      	mov	r1, r3
 80001ae:	6878      	ldr	r0, [r7, #4]
 80001b0:	f001 feb6 	bl	8001f20 <HAL_GPIO_WritePin>

}
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af02      	add	r7, sp, #8
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	607a      	str	r2, [r7, #4]
 80001c6:	461a      	mov	r2, r3
 80001c8:	460b      	mov	r3, r1
 80001ca:	72fb      	strb	r3, [r7, #11]
 80001cc:	4613      	mov	r3, r2
 80001ce:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 80001d0:	893b      	ldrh	r3, [r7, #8]
 80001d2:	2200      	movs	r2, #0
 80001d4:	4619      	mov	r1, r3
 80001d6:	6878      	ldr	r0, [r7, #4]
 80001d8:	f7ff ffde 	bl	8000198 <setCSLine>
	delay(docDelay);
 80001dc:	2003      	movs	r0, #3
 80001de:	f000 f8da 	bl	8000396 <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80001e2:	f107 0217 	add.w	r2, r7, #23
 80001e6:	f107 010b 	add.w	r1, r7, #11
 80001ea:	230a      	movs	r3, #10
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2301      	movs	r3, #1
 80001f0:	68f8      	ldr	r0, [r7, #12]
 80001f2:	f002 fb5b 	bl	80028ac <HAL_SPI_TransmitReceive>
	delay(docDelay);
 80001f6:	2003      	movs	r0, #3
 80001f8:	f000 f8cd 	bl	8000396 <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 80001fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000200:	893b      	ldrh	r3, [r7, #8]
 8000202:	4619      	mov	r1, r3
 8000204:	6878      	ldr	r0, [r7, #4]
 8000206:	f7ff ffc7 	bl	8000198 <setCSLine>
	return data;
 800020a:	7dfb      	ldrb	r3, [r7, #23]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3718      	adds	r7, #24
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b08e      	sub	sp, #56	; 0x38
 8000218:	af02      	add	r7, sp, #8
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4611      	mov	r1, r2
 8000220:	461a      	mov	r2, r3
 8000222:	460b      	mov	r3, r1
 8000224:	80fb      	strh	r3, [r7, #6]
 8000226:	4613      	mov	r3, r2
 8000228:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 800022a:	f000 f8bf 	bl	80003ac <DWT_Delay_Init>

	DWT->CYCCNT = 0;
 800022e:	4b47      	ldr	r3, [pc, #284]	; (800034c <getPositionSPI+0x138>)
 8000230:	2200      	movs	r2, #0
 8000232:	605a      	str	r2, [r3, #4]
	uint16_t currentPosition = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	2200      	movs	r2, #0
 800023c:	9200      	str	r2, [sp, #0]
 800023e:	68ba      	ldr	r2, [r7, #8]
 8000240:	2100      	movs	r1, #0
 8000242:	68f8      	ldr	r0, [r7, #12]
 8000244:	f7ff ffba 	bl	80001bc <spiWriteRead>
 8000248:	4603      	mov	r3, r0
 800024a:	b29b      	uxth	r3, r3
 800024c:	021b      	lsls	r3, r3, #8
 800024e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	delay(docDelay);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f8a0 	bl	8000396 <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	2201      	movs	r2, #1
 800025a:	9200      	str	r2, [sp, #0]
 800025c:	68ba      	ldr	r2, [r7, #8]
 800025e:	2100      	movs	r1, #0
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f7ff ffab 	bl	80001bc <spiWriteRead>
 8000266:	4603      	mov	r3, r0
 8000268:	b29a      	uxth	r2, r3
 800026a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800026c:	4313      	orrs	r3, r2
 800026e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < 16; i++)
 8000270:	2300      	movs	r3, #0
 8000272:	62bb      	str	r3, [r7, #40]	; 0x28
 8000274:	e010      	b.n	8000298 <getPositionSPI+0x84>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 8000276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800027a:	fa42 f303 	asr.w	r3, r2, r3
 800027e:	b2db      	uxtb	r3, r3
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	b2d9      	uxtb	r1, r3
 8000286:	f107 0214 	add.w	r2, r7, #20
 800028a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800028c:	4413      	add	r3, r2
 800028e:	460a      	mov	r2, r1
 8000290:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8000292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000294:	3301      	adds	r3, #1
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
 8000298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800029a:	2b0f      	cmp	r3, #15
 800029c:	ddeb      	ble.n	8000276 <getPositionSPI+0x62>
	if ((binaryArray[15]
 800029e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002a2:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80002a4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80002a8:	7ffb      	ldrb	r3, [r7, #31]
 80002aa:	4053      	eors	r3, r2
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	7f7b      	ldrb	r3, [r7, #29]
 80002b0:	4053      	eors	r3, r2
 80002b2:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 80002b4:	7efb      	ldrb	r3, [r7, #27]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80002b6:	4053      	eors	r3, r2
 80002b8:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 80002ba:	7e7b      	ldrb	r3, [r7, #25]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80002bc:	4053      	eors	r3, r2
 80002be:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 80002c0:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80002c2:	4053      	eors	r3, r2
 80002c4:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 80002c6:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	bf0c      	ite	eq
 80002cc:	2301      	moveq	r3, #1
 80002ce:	2300      	movne	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 80002d2:	4299      	cmp	r1, r3
 80002d4:	d120      	bne.n	8000318 <getPositionSPI+0x104>
			&& (binaryArray[14]
 80002d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80002da:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80002dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80002e0:	7fbb      	ldrb	r3, [r7, #30]
 80002e2:	4053      	eors	r3, r2
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	7f3b      	ldrb	r3, [r7, #28]
 80002e8:	4053      	eors	r3, r2
 80002ea:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80002ec:	7ebb      	ldrb	r3, [r7, #26]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80002ee:	4053      	eors	r3, r2
 80002f0:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80002f2:	7e3b      	ldrb	r3, [r7, #24]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80002f4:	4053      	eors	r3, r2
 80002f6:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 80002f8:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 80002fa:	4053      	eors	r3, r2
 80002fc:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 80002fe:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8000300:	429a      	cmp	r2, r3
 8000302:	bf0c      	ite	eq
 8000304:	2301      	moveq	r3, #1
 8000306:	2300      	movne	r3, #0
 8000308:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 800030a:	4299      	cmp	r1, r3
 800030c:	d104      	bne.n	8000318 <getPositionSPI+0x104>
		currentPosition &= 0x3FFF;
 800030e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000310:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000314:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000316:	e002      	b.n	800031e <getPositionSPI+0x10a>
	} else {
		currentPosition = 0xFFFF; //bad position
 8000318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800031c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	2b0c      	cmp	r3, #12
 8000322:	d107      	bne.n	8000334 <getPositionSPI+0x120>
 8000324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800032a:	4293      	cmp	r3, r2
 800032c:	d002      	beq.n	8000334 <getPositionSPI+0x120>
		currentPosition = currentPosition >> 2;
 800032e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t ddd = DWT->CYCCNT/72;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <getPositionSPI+0x138>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a05      	ldr	r2, [pc, #20]	; (8000350 <getPositionSPI+0x13c>)
 800033a:	fba2 2303 	umull	r2, r3, r2, r3
 800033e:	091b      	lsrs	r3, r3, #4
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
	return currentPosition;
 8000342:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8000344:	4618      	mov	r0, r3
 8000346:	3730      	adds	r7, #48	; 0x30
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	e0001000 	.word	0xe0001000
 8000350:	38e38e39 	.word	0x38e38e39

08000354 <setZeroSPI>:

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af02      	add	r7, sp, #8
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	4613      	mov	r3, r2
 8000360:	80fb      	strh	r3, [r7, #6]

	spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0);
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	2200      	movs	r2, #0
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	2100      	movs	r1, #0
 800036c:	68f8      	ldr	r0, [r7, #12]
 800036e:	f7ff ff25 	bl	80001bc <spiWriteRead>
	delay( docDelay);
 8000372:	2003      	movs	r0, #3
 8000374:	f000 f80f 	bl	8000396 <delay>
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	2201      	movs	r2, #1
 800037c:	9200      	str	r2, [sp, #0]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	2170      	movs	r1, #112	; 0x70
 8000382:	68f8      	ldr	r0, [r7, #12]
 8000384:	f7ff ff1a 	bl	80001bc <spiWriteRead>
	delay( docDelayLong + docDelayLong);
 8000388:	2064      	movs	r0, #100	; 0x64
 800038a:	f000 f804 	bl	8000396 <delay>

}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 8000396:	b580      	push	{r7, lr}
 8000398:	b082      	sub	sp, #8
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]

	DWT_Delay_ms(delayTime);
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f7ff fed4 	bl	800014c <DWT_Delay_ms>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <DWT_Delay_Init+0x58>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <DWT_Delay_Init+0x58>)
 80003b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80003ba:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <DWT_Delay_Init+0x58>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <DWT_Delay_Init+0x58>)
 80003c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003c6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003ce:	f023 0301 	bic.w	r3, r3, #1
 80003d2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80003e6:	bf00      	nop
    __ASM volatile ("NOP");
 80003e8:	bf00      	nop
    __ASM volatile ("NOP");
 80003ea:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80003f4:	2300      	movs	r3, #0
 80003f6:	e000      	b.n	80003fa <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80003f8:	2301      	movs	r3, #1
    }
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000edf0 	.word	0xe000edf0
 8000408:	e0001000 	.word	0xe0001000

0800040c <_ZN7TMC2209C1Ev>:
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"


TMC2209::TMC2209() {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2203      	movs	r2, #3
 8000418:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000422:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2203      	movs	r2, #3
 8000428:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000430:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	761a      	strb	r2, [r3, #24]
}
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
 8000450:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	461a      	mov	r2, r3
 800045c:	6879      	ldr	r1, [r7, #4]
 800045e:	68f8      	ldr	r0, [r7, #12]
 8000460:	f000 f914 	bl	800068c <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <_ZN7TMC22096enableEv>:

//  pinMode(hardware_enable_pin_, OUTPUT);
//  digitalWrite(hardware_enable_pin_, HIGH);
}

void TMC2209::enable() {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800047a:	2b00      	cmp	r3, #0
 800047c:	db04      	blt.n	8000488 <_ZN7TMC22096enableEv+0x1c>
		HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2120      	movs	r1, #32
 8000482:	480a      	ldr	r0, [pc, #40]	; (80004ac <_ZN7TMC22096enableEv+0x40>)
 8000484:	f001 fd4c 	bl	8001f20 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800048e:	f003 030f 	and.w	r3, r3, #15
 8000492:	b2d9      	uxtb	r1, r3
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7f13      	ldrb	r3, [r2, #28]
 8000498:	f361 0303 	bfi	r3, r1, #0, #4
 800049c:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f000 fb0b 	bl	8000aba <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40010800 	.word	0x40010800

080004b0 <_ZN7TMC22097disableEv>:

void TMC2209::disable() {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	db04      	blt.n	80004cc <_ZN7TMC22097disableEv+0x1c>
		//digitalWrite(hardware_enable_pin_, HIGH);
		HAL_GPIO_WritePin(En_GPIO_Port, En_Pin, GPIO_PIN_SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2120      	movs	r1, #32
 80004c6:	4807      	ldr	r0, [pc, #28]	; (80004e4 <_ZN7TMC22097disableEv+0x34>)
 80004c8:	f001 fd2a 	bl	8001f20 <HAL_GPIO_WritePin>
	}
	chopper_config_.toff = TOFF_DISABLE;
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7f13      	ldrb	r3, [r2, #28]
 80004d0:	f36f 0303 	bfc	r3, #0, #4
 80004d4:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 faef 	bl	8000aba <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010800 	.word	0x40010800

080004e8 <_ZN7TMC22099constrainEttt>:

uint16_t TMC2209::constrain(uint16_t x, uint16_t y, uint16_t z) {
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	4608      	mov	r0, r1
 80004f2:	4611      	mov	r1, r2
 80004f4:	461a      	mov	r2, r3
 80004f6:	4603      	mov	r3, r0
 80004f8:	817b      	strh	r3, [r7, #10]
 80004fa:	460b      	mov	r3, r1
 80004fc:	813b      	strh	r3, [r7, #8]
 80004fe:	4613      	mov	r3, r2
 8000500:	80fb      	strh	r3, [r7, #6]
	if (x < y) {
 8000502:	897a      	ldrh	r2, [r7, #10]
 8000504:	893b      	ldrh	r3, [r7, #8]
 8000506:	429a      	cmp	r2, r3
 8000508:	d201      	bcs.n	800050e <_ZN7TMC22099constrainEttt+0x26>
		return y;
 800050a:	893b      	ldrh	r3, [r7, #8]
 800050c:	e006      	b.n	800051c <_ZN7TMC22099constrainEttt+0x34>
	} else if (x > z) {
 800050e:	897a      	ldrh	r2, [r7, #10]
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	429a      	cmp	r2, r3
 8000514:	d901      	bls.n	800051a <_ZN7TMC22099constrainEttt+0x32>
		return z;
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	e000      	b.n	800051c <_ZN7TMC22099constrainEttt+0x34>
	} else {
		return x;
 800051a:	897b      	ldrh	r3, [r7, #10]
	}
}
 800051c:	4618      	mov	r0, r3
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
	...

08000528 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
		++exponent;
	}
	setMicrostepsPerStepPowerOfTwo(exponent);
}

void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b07      	cmp	r3, #7
 8000538:	d84a      	bhi.n	80005d0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000561 	.word	0x08000561
 8000544:	0800056f 	.word	0x0800056f
 8000548:	0800057d 	.word	0x0800057d
 800054c:	0800058b 	.word	0x0800058b
 8000550:	08000599 	.word	0x08000599
 8000554:	080005a7 	.word	0x080005a7
 8000558:	080005b5 	.word	0x080005b5
 800055c:	080005c3 	.word	0x080005c3
	case 0: {
		chopper_config_.mres = MRES_001;
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7fd3      	ldrb	r3, [r2, #31]
 8000564:	2108      	movs	r1, #8
 8000566:	f361 0303 	bfi	r3, r1, #0, #4
 800056a:	77d3      	strb	r3, [r2, #31]
		break;
 800056c:	e036      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7fd3      	ldrb	r3, [r2, #31]
 8000572:	2107      	movs	r1, #7
 8000574:	f361 0303 	bfi	r3, r1, #0, #4
 8000578:	77d3      	strb	r3, [r2, #31]
		break;
 800057a:	e02f      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7fd3      	ldrb	r3, [r2, #31]
 8000580:	2106      	movs	r1, #6
 8000582:	f361 0303 	bfi	r3, r1, #0, #4
 8000586:	77d3      	strb	r3, [r2, #31]
		break;
 8000588:	e028      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7fd3      	ldrb	r3, [r2, #31]
 800058e:	2105      	movs	r1, #5
 8000590:	f361 0303 	bfi	r3, r1, #0, #4
 8000594:	77d3      	strb	r3, [r2, #31]
		break;
 8000596:	e021      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7fd3      	ldrb	r3, [r2, #31]
 800059c:	2104      	movs	r1, #4
 800059e:	f361 0303 	bfi	r3, r1, #0, #4
 80005a2:	77d3      	strb	r3, [r2, #31]
		break;
 80005a4:	e01a      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7fd3      	ldrb	r3, [r2, #31]
 80005aa:	2103      	movs	r1, #3
 80005ac:	f361 0303 	bfi	r3, r1, #0, #4
 80005b0:	77d3      	strb	r3, [r2, #31]
		break;
 80005b2:	e013      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7fd3      	ldrb	r3, [r2, #31]
 80005b8:	2102      	movs	r1, #2
 80005ba:	f361 0303 	bfi	r3, r1, #0, #4
 80005be:	77d3      	strb	r3, [r2, #31]
		break;
 80005c0:	e00c      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7fd3      	ldrb	r3, [r2, #31]
 80005c6:	2101      	movs	r1, #1
 80005c8:	f361 0303 	bfi	r3, r1, #0, #4
 80005cc:	77d3      	strb	r3, [r2, #31]
		break;
 80005ce:	e005      	b.n	80005dc <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7fd3      	ldrb	r3, [r2, #31]
 80005d4:	f36f 0303 	bfc	r3, #0, #4
 80005d8:	77d3      	strb	r3, [r2, #31]
		break;
 80005da:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fa6c 	bl	8000aba <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop

080005ec <_ZN7TMC220913setRunCurrentEh>:

void TMC2209::setRunCurrent(uint8_t percent) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	uint8_t run_current = percentToCurrentSetting(percent);
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	4619      	mov	r1, r3
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f9de 	bl	80009be <_ZN7TMC220923percentToCurrentSettingEh>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
	driver_current_.irun = run_current;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	b2d9      	uxtb	r1, r3
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7c53      	ldrb	r3, [r2, #17]
 8000612:	f361 0304 	bfi	r3, r1, #0, #5
 8000616:	7453      	strb	r3, [r2, #17]
	writeStoredDriverCurrent();
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 fa22 	bl	8000a62 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_ZN7TMC220930disableAutomaticCurrentScalingEv>:
void TMC2209::enableAutomaticCurrentScaling() {
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticCurrentScaling() {
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8000634:	f36f 0382 	bfc	r3, #2, #1
 8000638:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 fa4b 	bl	8000ad8 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <_ZN7TMC220934disableAutomaticGradientAdaptationEv>:
void TMC2209::enableAutomaticGradientAdaptation() {
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticGradientAdaptation() {
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8000658:	f36f 03c3 	bfc	r3, #3, #1
 800065c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 fa39 	bl	8000ad8 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_ZN7TMC220910getVersionEv>:
	writeStoredGlobalConfig();
}

// bidirectional methods

uint8_t TMC2209::getVersion() {
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	Input input;
	input.bytes = read(ADDRESS_IOIN);
 8000676:	2106      	movs	r1, #6
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 f946 	bl	800090a <_ZN7TMC22094readEh>
 800067e:	4603      	mov	r3, r0
 8000680:	60fb      	str	r3, [r7, #12]

	return input.version;
 8000682:	7bfb      	ldrb	r3, [r7, #15]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_ZN7TMC220910initializeElNS_13SerialAddressE>:
	return read(ADDRESS_MSCNT);
}

// private
/* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	4613      	mov	r3, r2
 8000698:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4619      	mov	r1, r3
 80006a4:	68f8      	ldr	r0, [r7, #12]
 80006a6:	f000 f813 	bl	80006d0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f000 f838 	bl	8000720 <_ZN7TMC220922setRegistersToDefaultsEv>

	minimizeMotorCurrent();
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f8af 	bl	8000814 <_ZN7TMC220920minimizeMotorCurrentEv>
	disable();
 80006b6:	68f8      	ldr	r0, [r7, #12]
 80006b8:	f7ff fefa 	bl	80004b0 <_ZN7TMC22097disableEv>
	disableAutomaticCurrentScaling();
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f7ff ffb2 	bl	8000626 <_ZN7TMC220930disableAutomaticCurrentScalingEv>
	disableAutomaticGradientAdaptation();
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f7ff ffc1 	bl	800064a <_ZN7TMC220934disableAutomaticGradientAdaptationEv>
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:

//	  tmcuart->RxXferCount = 0;

}

void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7b13      	ldrb	r3, [r2, #12]
 80006ec:	f36f 0300 	bfc	r3, #0, #1
 80006f0:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	7b13      	ldrb	r3, [r2, #12]
 80006f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fa:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	7b13      	ldrb	r3, [r2, #12]
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	7b53      	ldrb	r3, [r2, #13]
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f997 	bl	8000a44 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	7c13      	ldrb	r3, [r2, #16]
 8000732:	2110      	movs	r1, #16
 8000734:	f361 0304 	bfi	r3, r1, #0, #5
 8000738:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	7c53      	ldrb	r3, [r2, #17]
 800073e:	f043 031f 	orr.w	r3, r3, #31
 8000742:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7c93      	ldrb	r3, [r2, #18]
 8000748:	2101      	movs	r1, #1
 800074a:	f361 0303 	bfi	r3, r1, #0, #4
 800074e:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	461a      	mov	r2, r3
 8000756:	2110      	movs	r1, #16
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f89a 	bl	8000892 <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a2a      	ldr	r2, [pc, #168]	; (800080c <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 8000762:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	69d3      	ldr	r3, [r2, #28]
 8000768:	2102      	movs	r1, #2
 800076a:	f361 33d0 	bfi	r3, r1, #15, #2
 800076e:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	8b93      	ldrh	r3, [r2, #28]
 8000774:	f36f 13ca 	bfc	r3, #7, #4
 8000778:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7f13      	ldrb	r3, [r2, #28]
 800077e:	2105      	movs	r1, #5
 8000780:	f361 1306 	bfi	r3, r1, #4, #3
 8000784:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	7f13      	ldrb	r3, [r2, #28]
 800078a:	2103      	movs	r1, #3
 800078c:	f361 0303 	bfi	r3, r1, #0, #4
 8000790:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	461a      	mov	r2, r3
 8000798:	216c      	movs	r1, #108	; 0x6c
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f879 	bl	8000892 <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	461a      	mov	r2, r3
 80007ac:	2170      	movs	r1, #112	; 0x70
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f000 f86f 	bl	8000892 <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	461a      	mov	r2, r3
 80007c0:	2142      	movs	r1, #66	; 0x42
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f865 	bl	8000892 <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 80007c8:	2214      	movs	r2, #20
 80007ca:	2111      	movs	r1, #17
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 f860 	bl	8000892 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2113      	movs	r1, #19
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 f85b 	bl	8000892 <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80007dc:	2200      	movs	r2, #0
 80007de:	2122      	movs	r1, #34	; 0x22
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f856 	bl	8000892 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2114      	movs	r1, #20
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f851 	bl	8000892 <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f84c 	bl	8000892 <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2142      	movs	r1, #66	; 0x42
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f847 	bl	8000892 <_ZN7TMC22095writeEhm>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	10000053 	.word	0x10000053
 8000810:	c10d0024 	.word	0xc10d0024

08000814 <_ZN7TMC220920minimizeMotorCurrentEv>:
	global_config.bytes = readGlobalConfigBytes();

	return global_config.pdn_disable;
}

void TMC2209::minimizeMotorCurrent() {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	driver_current_.irun = CURRENT_SETTING_MIN;
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	7c53      	ldrb	r3, [r2, #17]
 8000820:	f36f 0304 	bfc	r3, #0, #5
 8000824:	7453      	strb	r3, [r2, #17]
	driver_current_.ihold = CURRENT_SETTING_MIN;
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	7c13      	ldrb	r3, [r2, #16]
 800082a:	f36f 0304 	bfc	r3, #0, #5
 800082e:	7413      	strb	r3, [r2, #16]
	writeStoredDriverCurrent();
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f916 	bl	8000a62 <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_ZN7TMC220911reverseDataEm>:

uint32_t TMC2209::reverseData(uint32_t data) {
 800083e:	b480      	push	{r7}
 8000840:	b085      	sub	sp, #20
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 800084c:	2300      	movs	r3, #0
 800084e:	72fb      	strb	r3, [r7, #11]
 8000850:	e016      	b.n	8000880 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	f1c3 0303 	rsb	r3, r3, #3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8000864:	7abb      	ldrb	r3, [r7, #10]
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	fa22 f303 	lsr.w	r3, r2, r3
 800086c:	b2da      	uxtb	r2, r3
 800086e:	7a7b      	ldrb	r3, [r7, #9]
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	4313      	orrs	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	3301      	adds	r3, #1
 800087e:	72fb      	strb	r3, [r7, #11]
 8000880:	7afb      	ldrb	r3, [r7, #11]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d9e5      	bls.n	8000852 <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <_ZN7TMC22095writeEhm>:
	for (uint8_t i = 0; i < datagram_size; ++i) {
		byte = serialRead();
	}*/
}

void TMC2209::write(uint8_t register_address, uint32_t data) {
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	460b      	mov	r3, r1
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 80008a0:	f04f 0200 	mov.w	r2, #0
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 80008ac:	7c3b      	ldrb	r3, [r7, #16]
 80008ae:	2205      	movs	r2, #5
 80008b0:	f362 0303 	bfi	r3, r2, #0, #4
 80008b4:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 80008bc:	7afb      	ldrb	r3, [r7, #11]
 80008be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	7cbb      	ldrb	r3, [r7, #18]
 80008c6:	f362 0306 	bfi	r3, r2, #0, #7
 80008ca:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 80008cc:	7cbb      	ldrb	r3, [r7, #18]
 80008ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d2:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f7ff ffb1 	bl	800083e <_ZN7TMC220911reverseDataEm>
 80008dc:	4603      	mov	r3, r0
 80008de:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	2208      	movs	r2, #8
 80008e8:	4619      	mov	r1, r3
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 f903 	bl	8000af6 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 80008f0:	4603      	mov	r3, r0
 80008f2:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	2208      	movs	r2, #8
 80008fa:	4619      	mov	r1, r3
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f000 f949 	bl	8000b94 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_ZN7TMC22094readEh>:

/* CHANGED TO HAL */
uint32_t TMC2209::read(uint8_t register_address) {
 800090a:	b580      	push	{r7, lr}
 800090c:	b086      	sub	sp, #24
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	460b      	mov	r3, r1
 8000914:	70fb      	strb	r3, [r7, #3]
	ReadRequestDatagram read_request_datagram;
	read_request_datagram.bytes = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
	read_request_datagram.sync = SYNC;
 800091a:	7c3b      	ldrb	r3, [r7, #16]
 800091c:	2205      	movs	r2, #5
 800091e:	f362 0303 	bfi	r3, r2, #0, #4
 8000922:	743b      	strb	r3, [r7, #16]
	read_request_datagram.serial_address = serial_address_;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	747b      	strb	r3, [r7, #17]
	read_request_datagram.register_address = register_address;
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000930:	b2da      	uxtb	r2, r3
 8000932:	7cbb      	ldrb	r3, [r7, #18]
 8000934:	f362 0306 	bfi	r3, r2, #0, #7
 8000938:	74bb      	strb	r3, [r7, #18]
	read_request_datagram.rw = RW_READ;
 800093a:	7cbb      	ldrb	r3, [r7, #18]
 800093c:	f36f 13c7 	bfc	r3, #7, #1
 8000940:	74bb      	strb	r3, [r7, #18]
	read_request_datagram.crc = calculateCrc(read_request_datagram,	READ_REQUEST_DATAGRAM_SIZE);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2204      	movs	r2, #4
 8000948:	4619      	mov	r1, r3
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f93b 	bl	8000bc6 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h>
 8000950:	4603      	mov	r3, r0
 8000952:	74fb      	strb	r3, [r7, #19]

	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	4618      	mov	r0, r3
 800095a:	f003 fb9b 	bl	8004094 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&read_request_datagram.bytes), READ_REQUEST_DATAGRAM_SIZE, 12);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6898      	ldr	r0, [r3, #8]
 8000962:	f107 0110 	add.w	r1, r7, #16
 8000966:	230c      	movs	r3, #12
 8000968:	2204      	movs	r2, #4
 800096a:	f002 ffc5 	bl	80038f8 <HAL_UART_Transmit>

	WriteReadReplyDatagram read_reply_datagram;
	read_reply_datagram.bytes = 0;
 800096e:	f04f 0200 	mov.w	r2, #0
 8000972:	f04f 0300 	mov.w	r3, #0
 8000976:	e9c7 2302 	strd	r2, r3, [r7, #8]

	HAL_StatusTypeDef status3 = HAL_HalfDuplex_EnableReceiver(tmcuart);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fbbb 	bl	80040fa <HAL_HalfDuplex_EnableReceiver>
 8000984:	4603      	mov	r3, r0
 8000986:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_UART_Receive(tmcuart, (uint8_t *)(&read_reply_datagram.bytes), WRITE_READ_REPLY_DATAGRAM_SIZE, 12);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6898      	ldr	r0, [r3, #8]
 800098c:	f107 0108 	add.w	r1, r7, #8
 8000990:	230c      	movs	r3, #12
 8000992:	2208      	movs	r2, #8
 8000994:	f003 f833 	bl	80039fe <HAL_UART_Receive>
 8000998:	4603      	mov	r3, r0
 800099a:	75bb      	strb	r3, [r7, #22]
	if (status != HAL_OK){
 800099c:	7dbb      	ldrb	r3, [r7, #22]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <_ZN7TMC22094readEh+0x9c>
		return 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e007      	b.n	80009b6 <_ZN7TMC22094readEh+0xac>
	}

	return reverseData(read_reply_datagram.data);
 80009a6:	f8d7 300b 	ldr.w	r3, [r7, #11]
 80009aa:	4619      	mov	r1, r3
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff46 	bl	800083e <_ZN7TMC220911reverseDataEm>
 80009b2:	4603      	mov	r3, r0
 80009b4:	bf00      	nop
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <_ZN7TMC220923percentToCurrentSettingEh>:

uint8_t TMC2209::percentToCurrentSetting(uint8_t percent) {
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af02      	add	r7, sp, #8
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	70fb      	strb	r3, [r7, #3]
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	b299      	uxth	r1, r3
 80009ce:	2364      	movs	r3, #100	; 0x64
 80009d0:	2200      	movs	r2, #0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fd88 	bl	80004e8 <_ZN7TMC22099constrainEttt>
 80009d8:	4603      	mov	r3, r0
 80009da:	73fb      	strb	r3, [r7, #15]
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
 80009dc:	7bf9      	ldrb	r1, [r7, #15]
 80009de:	231f      	movs	r3, #31
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	2300      	movs	r3, #0
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2364      	movs	r3, #100	; 0x64
 80009e8:	2200      	movs	r2, #0
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f807 	bl	80009fe <_ZN7TMC22093mapEhhhhh>
 80009f0:	4603      	mov	r3, r0
 80009f2:	73bb      	strb	r3, [r7, #14]
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_ZN7TMC22093mapEhhhhh>:
	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
	return percent;
}

uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	4608      	mov	r0, r1
 8000a08:	4611      	mov	r1, r2
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	70fb      	strb	r3, [r7, #3]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70bb      	strb	r3, [r7, #2]
 8000a14:	4613      	mov	r3, r2
 8000a16:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000a18:	78fa      	ldrb	r2, [r7, #3]
 8000a1a:	78bb      	ldrb	r3, [r7, #2]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	7d39      	ldrb	r1, [r7, #20]
 8000a20:	7c3a      	ldrb	r2, [r7, #16]
 8000a22:	1a8a      	subs	r2, r1, r2
 8000a24:	fb03 f202 	mul.w	r2, r3, r2
 8000a28:	7879      	ldrb	r1, [r7, #1]
 8000a2a:	78bb      	ldrb	r3, [r7, #2]
 8000a2c:	1acb      	subs	r3, r1, r3
 8000a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	7c3b      	ldrb	r3, [r7, #16]
 8000a36:	4413      	add	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <_ZN7TMC220923writeStoredGlobalConfigEv>:
uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
	return percent;
}

void TMC2209::writeStoredGlobalConfig() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	461a      	mov	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff1c 	bl	8000892 <_ZN7TMC22095writeEhm>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_ZN7TMC220924writeStoredDriverCurrentEv>:

uint32_t TMC2209::readGlobalConfigBytes() {
	return read(ADDRESS_GCONF);
}

void TMC2209::writeStoredDriverCurrent() {
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2110      	movs	r1, #16
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ff0d 	bl	8000892 <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7c5b      	ldrb	r3, [r3, #17]
 8000a7c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b13      	cmp	r3, #19
 8000a84:	d905      	bls.n	8000a92 <_ZN7TMC220924writeStoredDriverCurrentEv+0x30>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	7d53      	ldrb	r3, [r2, #21]
 8000a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8e:	7553      	strb	r3, [r2, #21]
 8000a90:	e004      	b.n	8000a9c <_ZN7TMC220924writeStoredDriverCurrentEv+0x3a>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	7d53      	ldrb	r3, [r2, #21]
 8000a96:	f36f 13c7 	bfc	r3, #7, #1
 8000a9a:	7553      	strb	r3, [r2, #21]
	}
	if (cool_step_enabled_) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7e1b      	ldrb	r3, [r3, #24]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <_ZN7TMC220924writeStoredDriverCurrentEv+0x50>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2142      	movs	r1, #66	; 0x42
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fef0 	bl	8000892 <_ZN7TMC22095writeEhm>
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_ZN7TMC220924writeStoredChopperConfigEv>:

void TMC2209::writeStoredChopperConfig() {
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	216c      	movs	r1, #108	; 0x6c
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fee1 	bl	8000892 <_ZN7TMC22095writeEhm>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_ZN7TMC220920writeStoredPwmConfigEv>:

uint32_t TMC2209::readChopperConfigBytes() {
	return read(ADDRESS_CHOPCONF);
}

void TMC2209::writeStoredPwmConfig() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	2170      	movs	r1, #112	; 0x70
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fed2 	bl	8000892 <_ZN7TMC22095writeEhm>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8000af6:	b4f0      	push	{r4, r5, r6, r7}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	757b      	strb	r3, [r7, #21]
 8000b0c:	e037      	b.n	8000b7e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b14:	7d79      	ldrb	r1, [r7, #21]
 8000b16:	00c9      	lsls	r1, r1, #3
 8000b18:	f1c1 0620 	rsb	r6, r1, #32
 8000b1c:	f1a1 0020 	sub.w	r0, r1, #32
 8000b20:	fa22 f401 	lsr.w	r4, r2, r1
 8000b24:	fa03 f606 	lsl.w	r6, r3, r6
 8000b28:	4334      	orrs	r4, r6
 8000b2a:	fa23 f000 	lsr.w	r0, r3, r0
 8000b2e:	4304      	orrs	r4, r0
 8000b30:	fa23 f501 	lsr.w	r5, r3, r1
 8000b34:	4623      	mov	r3, r4
 8000b36:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	753b      	strb	r3, [r7, #20]
 8000b3c:	e019      	b.n	8000b72 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	09db      	lsrs	r3, r3, #7
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	7dbb      	ldrb	r3, [r7, #22]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d007      	beq.n	8000b60 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	f083 0307 	eor.w	r3, r3, #7
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	75fb      	strb	r3, [r7, #23]
 8000b5e:	e002      	b.n	8000b66 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8000b66:	7dbb      	ldrb	r3, [r7, #22]
 8000b68:	085b      	lsrs	r3, r3, #1
 8000b6a:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000b6c:	7d3b      	ldrb	r3, [r7, #20]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	753b      	strb	r3, [r7, #20]
 8000b72:	7d3b      	ldrb	r3, [r7, #20]
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d9e2      	bls.n	8000b3e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000b78:	7d7b      	ldrb	r3, [r7, #21]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	757b      	strb	r3, [r7, #21]
 8000b7e:	7d7a      	ldrb	r2, [r7, #21]
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbc2      	blt.n	8000b0e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bcf0      	pop	{r4, r5, r6, r7}
 8000b92:	4770      	bx	lr

08000b94 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 fa74 	bl	8004094 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6898      	ldr	r0, [r3, #8]
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	f002 fe9d 	bl	80038f8 <HAL_UART_Transmit>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8000bc6:	b480      	push	{r7}
 8000bc8:	b087      	sub	sp, #28
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	757b      	strb	r3, [r7, #21]
 8000bdc:	e029      	b.n	8000c32 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x6c>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	7d7b      	ldrb	r3, [r7, #21]
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	753b      	strb	r3, [r7, #20]
 8000bf0:	e019      	b.n	8000c26 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x60>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	09db      	lsrs	r3, r3, #7
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	7dbb      	ldrb	r3, [r7, #22]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d007      	beq.n	8000c14 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x4e>
				crc = (crc << 1) ^ 0x07;
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	f083 0307 	eor.w	r3, r3, #7
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	75fb      	strb	r3, [r7, #23]
 8000c12:	e002      	b.n	8000c1a <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x54>
				crc = crc << 1;
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8000c1a:	7dbb      	ldrb	r3, [r7, #22]
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8000c20:	7d3b      	ldrb	r3, [r7, #20]
 8000c22:	3301      	adds	r3, #1
 8000c24:	753b      	strb	r3, [r7, #20]
 8000c26:	7d3b      	ldrb	r3, [r7, #20]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d9e2      	bls.n	8000bf2 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x2c>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8000c2c:	7d7b      	ldrb	r3, [r7, #21]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	757b      	strb	r3, [r7, #21]
 8000c32:	7d7a      	ldrb	r2, [r7, #21]
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbd0      	blt.n	8000bde <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x18>
	return crc;
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	371c      	adds	r7, #28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Override the weak call back function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
      if (htim->Instance == TIM1) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d115      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x3e>
    	  HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	4827      	ldr	r0, [pc, #156]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c60:	f001 f976 	bl	8001f50 <HAL_GPIO_TogglePin>
    	  if (--cnt1==0)
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x3e>
    		  HAL_TIM_Base_Stop_IT(&htim1);
 8000c80:	4820      	ldr	r0, [pc, #128]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000c82:	f002 fa07 	bl	8003094 <HAL_TIM_Base_Stop_IT>
      }
      if (htim->Instance == TIM2) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c8e:	d114      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x72>
    	  HAL_GPIO_TogglePin(Step_GPIO_Port, Step_Pin);
 8000c90:	2110      	movs	r1, #16
 8000c92:	481d      	ldr	r0, [pc, #116]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000c94:	f001 f95c 	bl	8001f50 <HAL_GPIO_TogglePin>
    	  if (--cnt2==0)
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf0c      	ite	eq
 8000caa:	2301      	moveq	r3, #1
 8000cac:	2300      	movne	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x72>
    		  HAL_TIM_Base_Stop_IT(&htim2);
 8000cb4:	4816      	ldr	r0, [pc, #88]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000cb6:	f002 f9ed 	bl	8003094 <HAL_TIM_Base_Stop_IT>
      }
      if (htim->Instance == TIM3) {
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d114      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0xa6>
    	  HAL_GPIO_TogglePin(Step2_GPIO_Port, Step2_Pin);
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	4810      	ldr	r0, [pc, #64]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000cc8:	f001 f942 	bl	8001f50 <HAL_GPIO_TogglePin>
    	  if (--cnt3==0)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_TIM_PeriodElapsedCallback+0xa6>
    		  HAL_TIM_Base_Stop_IT(&htim3);
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000cea:	f002 f9d3 	bl	8003094 <HAL_TIM_Base_Stop_IT>
      }
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40012c00 	.word	0x40012c00
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	20000238 	.word	0x20000238
 8000d04:	20000080 	.word	0x20000080
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	2000023c 	.word	0x2000023c
 8000d10:	200000c8 	.word	0x200000c8
 8000d14:	40000400 	.word	0x40000400
 8000d18:	20000240 	.word	0x20000240
 8000d1c:	20000110 	.word	0x20000110

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d26:	f000 fd31 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2a:	f000 f889 	bl	8000e40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2e:	f000 fa89 	bl	8001244 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8000d32:	f000 f911 	bl	8000f58 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000d36:	f000 f96f 	bl	8001018 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000d3a:	f000 f9c9 	bl	80010d0 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8000d3e:	f000 fa25 	bl	800118c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000d42:	f000 fa51 	bl	80011e8 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000d46:	f000 f8cb 	bl	8000ee0 <_ZL12MX_SPI1_Initv>
  //HAL_Delay(10000);
  //HAL_TIM_Base_Start_IT(&htim3);
//  DWT_Delay_Init();


  tmcd0.setup(&huart1, 115200, tmcd0.SERIAL_ADDRESS_0);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d50:	4930      	ldr	r1, [pc, #192]	; (8000e14 <main+0xf4>)
 8000d52:	4831      	ldr	r0, [pc, #196]	; (8000e18 <main+0xf8>)
 8000d54:	f7ff fb76 	bl	8000444 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
  uint8_t ver0 = tmcd0.getVersion();
 8000d58:	482f      	ldr	r0, [pc, #188]	; (8000e18 <main+0xf8>)
 8000d5a:	f7ff fc88 	bl	800066e <_ZN7TMC220910getVersionEv>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]
  tmcd0.setRunCurrent(100);
 8000d62:	2164      	movs	r1, #100	; 0x64
 8000d64:	482c      	ldr	r0, [pc, #176]	; (8000e18 <main+0xf8>)
 8000d66:	f7ff fc41 	bl	80005ec <_ZN7TMC220913setRunCurrentEh>
  tmcd0.enable();
 8000d6a:	482b      	ldr	r0, [pc, #172]	; (8000e18 <main+0xf8>)
 8000d6c:	f7ff fb7e 	bl	800046c <_ZN7TMC22096enableEv>
  tmcd0.setMicrostepsPerStepPowerOfTwo(0);
 8000d70:	2100      	movs	r1, #0
 8000d72:	4829      	ldr	r0, [pc, #164]	; (8000e18 <main+0xf8>)
 8000d74:	f7ff fbd8 	bl	8000528 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

  tmcd1.setup(&huart1, 115200, tmcd1.SERIAL_ADDRESS_1);
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7e:	4925      	ldr	r1, [pc, #148]	; (8000e14 <main+0xf4>)
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <main+0xfc>)
 8000d82:	f7ff fb5f 	bl	8000444 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
  uint8_t ver1 =  tmcd1.getVersion();
 8000d86:	4825      	ldr	r0, [pc, #148]	; (8000e1c <main+0xfc>)
 8000d88:	f7ff fc71 	bl	800066e <_ZN7TMC220910getVersionEv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73bb      	strb	r3, [r7, #14]
  tmcd1.setRunCurrent(100);
 8000d90:	2164      	movs	r1, #100	; 0x64
 8000d92:	4822      	ldr	r0, [pc, #136]	; (8000e1c <main+0xfc>)
 8000d94:	f7ff fc2a 	bl	80005ec <_ZN7TMC220913setRunCurrentEh>
  tmcd1.enable();
 8000d98:	4820      	ldr	r0, [pc, #128]	; (8000e1c <main+0xfc>)
 8000d9a:	f7ff fb67 	bl	800046c <_ZN7TMC22096enableEv>
  tmcd1.setMicrostepsPerStepPowerOfTwo(0);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	481e      	ldr	r0, [pc, #120]	; (8000e1c <main+0xfc>)
 8000da2:	f7ff fbc1 	bl	8000528 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

  setZeroSPI(&hspi1, CS_GPIO_Port, CS_Pin);
 8000da6:	2201      	movs	r2, #1
 8000da8:	491d      	ldr	r1, [pc, #116]	; (8000e20 <main+0x100>)
 8000daa:	481e      	ldr	r0, [pc, #120]	; (8000e24 <main+0x104>)
 8000dac:	f7ff fad2 	bl	8000354 <setZeroSPI>
  setZeroSPI(&hspi1, CS2_GPIO_Port, CS2_Pin);
 8000db0:	2202      	movs	r2, #2
 8000db2:	491b      	ldr	r1, [pc, #108]	; (8000e20 <main+0x100>)
 8000db4:	481b      	ldr	r0, [pc, #108]	; (8000e24 <main+0x104>)
 8000db6:	f7ff facd 	bl	8000354 <setZeroSPI>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  cnt1=5*2;
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <main+0x108>)
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	601a      	str	r2, [r3, #0]
	  cnt2=100*2;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <main+0x10c>)
 8000dc2:	22c8      	movs	r2, #200	; 0xc8
 8000dc4:	601a      	str	r2, [r3, #0]
	  cnt3=200*2;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <main+0x110>)
 8000dc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000dcc:	601a      	str	r2, [r3, #0]

	  //htim2M2->Instance->ARR

	  //printf("Status0: %d | %d | %d\n",cnt1,cnt2,cnt3);
	  HAL_TIM_Base_Start_IT(&htim1); // запуск таймера
 8000dce:	4819      	ldr	r0, [pc, #100]	; (8000e34 <main+0x114>)
 8000dd0:	f002 f90e 	bl	8002ff0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim2); // запуск таймера
 8000dd4:	4818      	ldr	r0, [pc, #96]	; (8000e38 <main+0x118>)
 8000dd6:	f002 f90b 	bl	8002ff0 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim3); // запуск таймера
 8000dda:	4818      	ldr	r0, [pc, #96]	; (8000e3c <main+0x11c>)
 8000ddc:	f002 f908 	bl	8002ff0 <HAL_TIM_Base_Start_IT>
	  //while (cnt1>0 | cnt2>0 | cnt3>0 ){
		  //printf("Status: %d | %d | %d\n",cnt1,cnt2,cnt3);
		  //HAL_Delay(100);
	  //}
	  //printf("Stopped\n");
	  HAL_Delay(1000);
 8000de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de4:	f000 fd34 	bl	8001850 <HAL_Delay>
	  uint32_t posNowEnc1 = getPositionSPI(&hspi1, CS_GPIO_Port, CS_Pin, 14);
 8000de8:	230e      	movs	r3, #14
 8000dea:	2201      	movs	r2, #1
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <main+0x100>)
 8000dee:	480d      	ldr	r0, [pc, #52]	; (8000e24 <main+0x104>)
 8000df0:	f7ff fa10 	bl	8000214 <getPositionSPI>
 8000df4:	4603      	mov	r3, r0
 8000df6:	60bb      	str	r3, [r7, #8]
	  uint32_t posNowEnc2 = getPositionSPI(&hspi1, CS2_GPIO_Port, CS2_Pin, 14);
 8000df8:	230e      	movs	r3, #14
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	4908      	ldr	r1, [pc, #32]	; (8000e20 <main+0x100>)
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <main+0x104>)
 8000e00:	f7ff fa08 	bl	8000214 <getPositionSPI>
 8000e04:	4603      	mov	r3, r0
 8000e06:	607b      	str	r3, [r7, #4]
	  HAL_Delay(4000);
 8000e08:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000e0c:	f000 fd20 	bl	8001850 <HAL_Delay>
	  //printf("-------------------\n");
    /* USER CODE BEGIN 3 */
  }
 8000e10:	e7d3      	b.n	8000dba <main+0x9a>
 8000e12:	bf00      	nop
 8000e14:	20000158 	.word	0x20000158
 8000e18:	20000210 	.word	0x20000210
 8000e1c:	200001e8 	.word	0x200001e8
 8000e20:	40010c00 	.word	0x40010c00
 8000e24:	20000028 	.word	0x20000028
 8000e28:	20000238 	.word	0x20000238
 8000e2c:	2000023c 	.word	0x2000023c
 8000e30:	20000240 	.word	0x20000240
 8000e34:	20000080 	.word	0x20000080
 8000e38:	200000c8 	.word	0x200000c8
 8000e3c:	20000110 	.word	0x20000110

08000e40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b090      	sub	sp, #64	; 0x40
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fc1e 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 f87b 	bl	8001f84 <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf14      	ite	ne
 8000e94:	2301      	movne	r3, #1
 8000e96:	2300      	moveq	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8000e9e:	f000 fa55 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 fae3 	bl	8002488 <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8000ed2:	f000 fa3b 	bl	800134c <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3740      	adds	r7, #64	; 0x40
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000ee6:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <_ZL12MX_SPI1_Initv+0x74>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f14:	2218      	movs	r2, #24
 8000f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <_ZL12MX_SPI1_Initv+0x70>)
 8000f32:	f001 fc37 	bl	80027a4 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f46:	f000 fa01 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000028 	.word	0x20000028
 8000f54:	40013000 	.word	0x40013000

08000f58 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f76:	4a27      	ldr	r2, [pc, #156]	; (8001014 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f7c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000f80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = T1_CNT;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f8a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000f8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa2:	481b      	ldr	r0, [pc, #108]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000fa4:	f001 ffd4 	bl	8002f50 <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf14      	ite	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	2300      	moveq	r3, #0
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000fb8:	f000 f9c8 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4811      	ldr	r0, [pc, #68]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000fca:	f002 f999 	bl	8003300 <HAL_TIM_ConfigClockSource>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf14      	ite	ne
 8000fd4:	2301      	movne	r3, #1
 8000fd6:	2300      	moveq	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8000fde:	f000 f9b5 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <_ZL12MX_TIM1_Initv+0xb8>)
 8000ff0:	f002 fb6a 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bf14      	ite	ne
 8000ffa:	2301      	movne	r3, #1
 8000ffc:	2300      	moveq	r3, #0
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8001004:	f000 f9a2 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000080 	.word	0x20000080
 8001014:	40012c00 	.word	0x40012c00

08001018 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 800103e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001042:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = T2_CNT;
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 800104c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001050:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105e:	481b      	ldr	r0, [pc, #108]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 8001060:	f001 ff76 	bl	8002f50 <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	bf14      	ite	ne
 800106a:	2301      	movne	r3, #1
 800106c:	2300      	moveq	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8001074:	f000 f96a 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 8001086:	f002 f93b 	bl	8003300 <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf14      	ite	ne
 8001090:	2301      	movne	r3, #1
 8001092:	2300      	moveq	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800109a:	f000 f957 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800109e:	2320      	movs	r3, #32
 80010a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <_ZL12MX_TIM2_Initv+0xb4>)
 80010ac:	f002 fb0c 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bf14      	ite	ne
 80010b6:	2301      	movne	r3, #1
 80010b8:	2300      	moveq	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80010c0:	f000 f944 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000c8 	.word	0x200000c8

080010d0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 80010ee:	4a26      	ldr	r2, [pc, #152]	; (8001188 <_ZL12MX_TIM3_Initv+0xb8>)
 80010f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 80010f4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80010f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = T3_CNT;
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 8001102:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001106:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001114:	481b      	ldr	r0, [pc, #108]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 8001116:	f001 ff1b 	bl	8002f50 <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 800112a:	f000 f90f 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4619      	mov	r1, r3
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 800113c:	f002 f8e0 	bl	8003300 <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8001150:	f000 f8fc 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001154:	2320      	movs	r3, #32
 8001156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <_ZL12MX_TIM3_Initv+0xb4>)
 8001162:	f002 fab1 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf14      	ite	ne
 800116c:	2301      	movne	r3, #1
 800116e:	2300      	moveq	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001176:	f000 f8e9 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000110 	.word	0x20000110
 8001188:	40000400 	.word	0x40000400

0800118c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80011c4:	f002 fb40 	bl	8003848 <HAL_HalfDuplex_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80011d8:	f000 f8b8 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000158 	.word	0x20000158
 80011e4:	40013800 	.word	0x40013800

080011e8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x58>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001220:	f002 fac2 	bl	80037a8 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf14      	ite	ne
 800122a:	2301      	movne	r3, #1
 800122c:	2300      	moveq	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <_ZL19MX_USART2_UART_Initv+0x50>
  {
	  Error_Handler();
 8001234:	f000 f88a 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001a0 	.word	0x200001a0
 8001240:	40004400 	.word	0x40004400

08001244 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a37      	ldr	r2, [pc, #220]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001270:	4b32      	ldr	r3, [pc, #200]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a31      	ldr	r2, [pc, #196]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a2b      	ldr	r2, [pc, #172]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <_ZL12MX_GPIO_Initv+0xf8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	4820      	ldr	r0, [pc, #128]	; (8001340 <_ZL12MX_GPIO_Initv+0xfc>)
 80012c0:	f000 fe2e 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step_Pin|En_Pin|Dir_Pin|Step2_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	21f0      	movs	r1, #240	; 0xf0
 80012c8:	481e      	ldr	r0, [pc, #120]	; (8001344 <_ZL12MX_GPIO_Initv+0x100>)
 80012ca:	f000 fe29 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CS2_Pin|Dir2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f240 4103 	movw	r1, #1027	; 0x403
 80012d4:	481c      	ldr	r0, [pc, #112]	; (8001348 <_ZL12MX_GPIO_Initv+0x104>)
 80012d6:	f000 fe23 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <_ZL12MX_GPIO_Initv+0xfc>)
 80012f4:	f000 fc90 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step_Pin En_Pin Dir_Pin Step2_Pin */
  GPIO_InitStruct.Pin = Step_Pin|En_Pin|Dir_Pin|Step2_Pin;
 80012f8:	23f0      	movs	r3, #240	; 0xf0
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <_ZL12MX_GPIO_Initv+0x100>)
 8001310:	f000 fc82 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin CS2_Pin Dir2_Pin */
  GPIO_InitStruct.Pin = CS_Pin|CS2_Pin|Dir2_Pin;
 8001314:	f240 4303 	movw	r3, #1027	; 0x403
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <_ZL12MX_GPIO_Initv+0x104>)
 800132e:	f000 fc73 	bl	8001c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40011000 	.word	0x40011000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d10a      	bne.n	800137e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136e:	4293      	cmp	r3, r2
 8001370:	d105      	bne.n	800137e <_Z41__static_initialization_and_destruction_0ii+0x26>
TMC2209 tmcd1,tmcd0;
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001374:	f7ff f84a 	bl	800040c <_ZN7TMC2209C1Ev>
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800137a:	f7ff f847 	bl	800040c <_ZN7TMC2209C1Ev>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001e8 	.word	0x200001e8
 800138c:	20000210 	.word	0x20000210

08001390 <_GLOBAL__sub_I_hspi1>:
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
 8001394:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff ffdd 	bl	8001358 <_Z41__static_initialization_and_destruction_0ii>
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_MspInit+0x5c>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_MspInit+0x5c>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_MspInit+0x5c>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x5c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_MspInit+0x5c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x5c>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_MspInit+0x60>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_MspInit+0x60>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000

08001404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <HAL_SPI_MspInit+0xb4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d145      	bne.n	80014b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_SPI_MspInit+0xb8>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a24      	ldr	r2, [pc, #144]	; (80014bc <HAL_SPI_MspInit+0xb8>)
 800142a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <HAL_SPI_MspInit+0xb8>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <HAL_SPI_MspInit+0xb8>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <HAL_SPI_MspInit+0xb8>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_SPI_MspInit+0xb8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001454:	2328      	movs	r3, #40	; 0x28
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4816      	ldr	r0, [pc, #88]	; (80014c0 <HAL_SPI_MspInit+0xbc>)
 8001468:	f000 fbd6 	bl	8001c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800146c:	2310      	movs	r3, #16
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4810      	ldr	r0, [pc, #64]	; (80014c0 <HAL_SPI_MspInit+0xbc>)
 8001480:	f000 fbca 	bl	8001c18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_SPI_MspInit+0xc0>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_SPI_MspInit+0xc0>)
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2023      	movs	r0, #35	; 0x23
 80014a6:	f000 face 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014aa:	2023      	movs	r0, #35	; 0x23
 80014ac:	f000 fae7 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40013000 	.word	0x40013000
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40010000 	.word	0x40010000

080014c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <HAL_TIM_Base_MspInit+0xac>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d114      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a26      	ldr	r2, [pc, #152]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2019      	movs	r0, #25
 80014f8:	f000 faa5 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014fc:	2019      	movs	r0, #25
 80014fe:	f000 fabe 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001502:	e032      	b.n	800156a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d114      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201c      	movs	r0, #28
 800152c:	f000 fa8b 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001530:	201c      	movs	r0, #28
 8001532:	f000 faa4 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 8001536:	e018      	b.n	800156a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_TIM_Base_MspInit+0xb4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d113      	bne.n	800156a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_TIM_Base_MspInit+0xb0>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	201d      	movs	r0, #29
 8001560:	f000 fa71 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001564:	201d      	movs	r0, #29
 8001566:	f000 fa8a 	bl	8001a7e <HAL_NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40012c00 	.word	0x40012c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40000400 	.word	0x40000400

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a35      	ldr	r2, [pc, #212]	; (8001670 <HAL_UART_MspInit+0xf0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d12d      	bne.n	80015fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a0:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_UART_MspInit+0xf4>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a33      	ldr	r2, [pc, #204]	; (8001674 <HAL_UART_MspInit+0xf4>)
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_UART_MspInit+0xf4>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <HAL_UART_MspInit+0xf4>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a2d      	ldr	r2, [pc, #180]	; (8001674 <HAL_UART_MspInit+0xf4>)
 80015be:	f043 0304 	orr.w	r3, r3, #4
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_UART_MspInit+0xf4>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d6:	2312      	movs	r3, #18
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4824      	ldr	r0, [pc, #144]	; (8001678 <HAL_UART_MspInit+0xf8>)
 80015e6:	f000 fb17 	bl	8001c18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2025      	movs	r0, #37	; 0x25
 80015f0:	f000 fa29 	bl	8001a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f4:	2025      	movs	r0, #37	; 0x25
 80015f6:	f000 fa42 	bl	8001a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fa:	e034      	b.n	8001666 <HAL_UART_MspInit+0xe6>
  else if(huart->Instance==USART2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_UART_MspInit+0xfc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12f      	bne.n	8001666 <HAL_UART_MspInit+0xe6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_UART_MspInit+0xf4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_UART_MspInit+0xf4>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_UART_MspInit+0xf4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_UART_MspInit+0xf4>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_UART_MspInit+0xf4>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6193      	str	r3, [r2, #24]
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_UART_MspInit+0xf4>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001636:	2304      	movs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4619      	mov	r1, r3
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <HAL_UART_MspInit+0xf8>)
 800164a:	f000 fae5 	bl	8001c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800164e:	2308      	movs	r3, #8
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0318 	add.w	r3, r7, #24
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_UART_MspInit+0xf8>)
 8001662:	f000 fad9 	bl	8001c18 <HAL_GPIO_Init>
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40013800 	.word	0x40013800
 8001674:	40021000 	.word	0x40021000
 8001678:	40010800 	.word	0x40010800
 800167c:	40004400 	.word	0x40004400

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c6:	f000 f8a7 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <TIM1_UP_IRQHandler+0x10>)
 80016d6:	f001 fd0b 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000080 	.word	0x20000080

080016e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM2_IRQHandler+0x10>)
 80016ea:	f001 fd01 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000c8 	.word	0x200000c8

080016f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <TIM3_IRQHandler+0x10>)
 80016fe:	f001 fcf7 	bl	80030f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000110 	.word	0x20000110

0800170c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <SPI1_IRQHandler+0x10>)
 8001712:	f001 fa7b 	bl	8002c0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000028 	.word	0x20000028

08001720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <USART1_IRQHandler+0x10>)
 8001726:	f002 f9fd 	bl	8003b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000158 	.word	0x20000158

08001734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff fff8 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001746:	490c      	ldr	r1, [pc, #48]	; (8001778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <LoopFillZerobss+0x16>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800175c:	4c09      	ldr	r4, [pc, #36]	; (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f002 ff99 	bl	80046a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff fad7 	bl	8000d20 <main>
  bx lr
 8001772:	4770      	bx	lr
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800177c:	08004738 	.word	0x08004738
  ldr r2, =_sbss
 8001780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001784:	20000248 	.word	0x20000248

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_Init+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x28>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f947 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fdfa 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f95f 	bl	8001a9a <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f927 	bl	8001a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000000 	.word	0x20000000
 8001810:	20000008 	.word	0x20000008
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x1c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x20>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_IncTick+0x20>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	20000008 	.word	0x20000008
 8001838:	20000244 	.word	0x20000244

0800183c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b02      	ldr	r3, [pc, #8]	; (800184c <HAL_GetTick+0x10>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	20000244 	.word	0x20000244

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff fff0 	bl	800183c <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffe0 	bl	800183c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008

08001898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b4:	4013      	ands	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <__NVIC_SetPriorityGrouping+0x44>)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_GetPriorityGrouping+0x18>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	f003 0307 	and.w	r3, r3, #7
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	db0b      	blt.n	8001926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	f003 021f 	and.w	r2, r3, #31
 8001914:	4906      	ldr	r1, [pc, #24]	; (8001930 <__NVIC_EnableIRQ+0x34>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	2001      	movs	r0, #1
 800191e:	fa00 f202 	lsl.w	r2, r0, r2
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	; (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019fc:	d301      	bcc.n	8001a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00f      	b.n	8001a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <SysTick_Config+0x40>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0a:	210f      	movs	r1, #15
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f7ff ff90 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <SysTick_Config+0x40>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <SysTick_Config+0x40>)
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	e000e010 	.word	0xe000e010

08001a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ff2d 	bl	8001898 <__NVIC_SetPriorityGrouping>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a58:	f7ff ff42 	bl	80018e0 <__NVIC_GetPriorityGrouping>
 8001a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	6978      	ldr	r0, [r7, #20]
 8001a64:	f7ff ff90 	bl	8001988 <NVIC_EncodePriority>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff5f 	bl	8001934 <__NVIC_SetPriority>
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff35 	bl	80018fc <__NVIC_EnableIRQ>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffa2 	bl	80019ec <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d008      	beq.n	8001adc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2204      	movs	r2, #4
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e020      	b.n	8001b1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020e 	bic.w	r2, r2, #14
 8001aea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d005      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2204      	movs	r2, #4
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e051      	b.n	8001bf0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020e 	bic.w	r2, r2, #14
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_DMA_Abort_IT+0xd4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d029      	beq.n	8001bca <HAL_DMA_Abort_IT+0xa2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_DMA_Abort_IT+0xd8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <HAL_DMA_Abort_IT+0x9e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_DMA_Abort_IT+0xdc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01a      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x98>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_DMA_Abort_IT+0xe0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d012      	beq.n	8001bba <HAL_DMA_Abort_IT+0x92>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_DMA_Abort_IT+0xe4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x8c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_DMA_Abort_IT+0xe8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d102      	bne.n	8001bae <HAL_DMA_Abort_IT+0x86>
 8001ba8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bac:	e00e      	b.n	8001bcc <HAL_DMA_Abort_IT+0xa4>
 8001bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb2:	e00b      	b.n	8001bcc <HAL_DMA_Abort_IT+0xa4>
 8001bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb8:	e008      	b.n	8001bcc <HAL_DMA_Abort_IT+0xa4>
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	e005      	b.n	8001bcc <HAL_DMA_Abort_IT+0xa4>
 8001bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bc4:	e002      	b.n	8001bcc <HAL_DMA_Abort_IT+0xa4>
 8001bc6:	2310      	movs	r3, #16
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_Abort_IT+0xa4>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_DMA_Abort_IT+0xec>)
 8001bce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	4798      	blx	r3
    } 
  }
  return status;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40020008 	.word	0x40020008
 8001c00:	4002001c 	.word	0x4002001c
 8001c04:	40020030 	.word	0x40020030
 8001c08:	40020044 	.word	0x40020044
 8001c0c:	40020058 	.word	0x40020058
 8001c10:	4002006c 	.word	0x4002006c
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	e169      	b.n	8001f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 8158 	bne.w	8001efa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a9a      	ldr	r2, [pc, #616]	; (8001eb8 <HAL_GPIO_Init+0x2a0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d05e      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c54:	4a98      	ldr	r2, [pc, #608]	; (8001eb8 <HAL_GPIO_Init+0x2a0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d875      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c5a:	4a98      	ldr	r2, [pc, #608]	; (8001ebc <HAL_GPIO_Init+0x2a4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d058      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c60:	4a96      	ldr	r2, [pc, #600]	; (8001ebc <HAL_GPIO_Init+0x2a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d86f      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c66:	4a96      	ldr	r2, [pc, #600]	; (8001ec0 <HAL_GPIO_Init+0x2a8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d052      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a94      	ldr	r2, [pc, #592]	; (8001ec0 <HAL_GPIO_Init+0x2a8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d869      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c72:	4a94      	ldr	r2, [pc, #592]	; (8001ec4 <HAL_GPIO_Init+0x2ac>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d04c      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c78:	4a92      	ldr	r2, [pc, #584]	; (8001ec4 <HAL_GPIO_Init+0x2ac>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d863      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c7e:	4a92      	ldr	r2, [pc, #584]	; (8001ec8 <HAL_GPIO_Init+0x2b0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d046      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c84:	4a90      	ldr	r2, [pc, #576]	; (8001ec8 <HAL_GPIO_Init+0x2b0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d85d      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c8a:	2b12      	cmp	r3, #18
 8001c8c:	d82a      	bhi.n	8001ce4 <HAL_GPIO_Init+0xcc>
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d859      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_GPIO_Init+0x80>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001d13 	.word	0x08001d13
 8001c9c:	08001ced 	.word	0x08001ced
 8001ca0:	08001cff 	.word	0x08001cff
 8001ca4:	08001d41 	.word	0x08001d41
 8001ca8:	08001d47 	.word	0x08001d47
 8001cac:	08001d47 	.word	0x08001d47
 8001cb0:	08001d47 	.word	0x08001d47
 8001cb4:	08001d47 	.word	0x08001d47
 8001cb8:	08001d47 	.word	0x08001d47
 8001cbc:	08001d47 	.word	0x08001d47
 8001cc0:	08001d47 	.word	0x08001d47
 8001cc4:	08001d47 	.word	0x08001d47
 8001cc8:	08001d47 	.word	0x08001d47
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d47 	.word	0x08001d47
 8001cd4:	08001d47 	.word	0x08001d47
 8001cd8:	08001d47 	.word	0x08001d47
 8001cdc:	08001cf5 	.word	0x08001cf5
 8001ce0:	08001d09 	.word	0x08001d09
 8001ce4:	4a79      	ldr	r2, [pc, #484]	; (8001ecc <HAL_GPIO_Init+0x2b4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cea:	e02c      	b.n	8001d46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e029      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	623b      	str	r3, [r7, #32]
          break;
 8001cfc:	e024      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	3308      	adds	r3, #8
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e01f      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e01a      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e013      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	611a      	str	r2, [r3, #16]
          break;
 8001d32:	e009      	b.n	8001d48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	615a      	str	r2, [r3, #20]
          break;
 8001d3e:	e003      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          break;
 8001d46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d801      	bhi.n	8001d52 <HAL_GPIO_Init+0x13a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_Init+0x13e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d802      	bhi.n	8001d64 <HAL_GPIO_Init+0x14c>
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x152>
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	3b08      	subs	r3, #8
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	210f      	movs	r1, #15
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80b1 	beq.w	8001efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d98:	4b4d      	ldr	r3, [pc, #308]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_GPIO_Init+0x2b8>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001db0:	4a48      	ldr	r2, [pc, #288]	; (8001ed4 <HAL_GPIO_Init+0x2bc>)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a40      	ldr	r2, [pc, #256]	; (8001ed8 <HAL_GPIO_Init+0x2c0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_GPIO_Init+0x1ec>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a3f      	ldr	r2, [pc, #252]	; (8001edc <HAL_GPIO_Init+0x2c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00d      	beq.n	8001e00 <HAL_GPIO_Init+0x1e8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <HAL_GPIO_Init+0x2c8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <HAL_GPIO_Init+0x1e4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a3d      	ldr	r2, [pc, #244]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_GPIO_Init+0x1e0>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e006      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	e004      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_GPIO_Init+0x1ee>
 8001e04:	2300      	movs	r3, #0
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	4093      	lsls	r3, r2
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e16:	492f      	ldr	r1, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x2bc>)
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	492c      	ldr	r1, [pc, #176]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4928      	ldr	r1, [pc, #160]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	491e      	ldr	r1, [pc, #120]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4918      	ldr	r1, [pc, #96]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4914      	ldr	r1, [pc, #80]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d021      	beq.n	8001eec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e021      	b.n	8001efa <HAL_GPIO_Init+0x2e2>
 8001eb6:	bf00      	nop
 8001eb8:	10320000 	.word	0x10320000
 8001ebc:	10310000 	.word	0x10310000
 8001ec0:	10220000 	.word	0x10220000
 8001ec4:	10210000 	.word	0x10210000
 8001ec8:	10120000 	.word	0x10120000
 8001ecc:	10110000 	.word	0x10110000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	4909      	ldr	r1, [pc, #36]	; (8001f1c <HAL_GPIO_Init+0x304>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	3301      	adds	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f47f ae8e 	bne.w	8001c2c <HAL_GPIO_Init+0x14>
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	372c      	adds	r7, #44	; 0x2c
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43d9      	mvns	r1, r3
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	400b      	ands	r3, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	611a      	str	r2, [r3, #16]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e272      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8087 	beq.w	80020b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa4:	4b92      	ldr	r3, [pc, #584]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00c      	beq.n	8001fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d112      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fca:	4b89      	ldr	r3, [pc, #548]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d06c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x12c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d168      	bne.n	80020b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e24c      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x76>
 8001fec:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a7f      	ldr	r2, [pc, #508]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e02e      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x98>
 8002002:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7a      	ldr	r2, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a77      	ldr	r2, [pc, #476]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0xbc>
 8002026:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a71      	ldr	r2, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a6e      	ldr	r2, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xd4>
 8002040:	4b6b      	ldr	r3, [pc, #428]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6a      	ldr	r2, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff fbec 	bl	800183c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fbe8 	bl	800183c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e200      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b5d      	ldr	r3, [pc, #372]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xe4>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7ff fbd8 	bl	800183c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fbd4 	bl	800183c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	; 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1ec      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x10c>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d063      	beq.n	8002186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020be:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d11c      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
 80020d6:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e1c0      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4939      	ldr	r1, [pc, #228]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	e03a      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002118:	4b36      	ldr	r3, [pc, #216]	; (80021f4 <HAL_RCC_OscConfig+0x270>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fb8d 	bl	800183c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002126:	f7ff fb89 	bl	800183c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e1a1      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4927      	ldr	r1, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
 8002158:	e015      	b.n	8002186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_RCC_OscConfig+0x270>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fb6c 	bl	800183c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7ff fb68 	bl	800183c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e180      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d03a      	beq.n	8002208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7ff fb4c 	bl	800183c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fb48 	bl	800183c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e160      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f000 face 	bl	8002768 <RCC_Delay>
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_RCC_OscConfig+0x274>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff fb32 	bl	800183c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021da:	e00f      	b.n	80021fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7ff fb2e 	bl	800183c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d908      	bls.n	80021fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e146      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	42420000 	.word	0x42420000
 80021f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b92      	ldr	r3, [pc, #584]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e9      	bne.n	80021dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a6 	beq.w	8002362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b8b      	ldr	r3, [pc, #556]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a87      	ldr	r2, [pc, #540]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b85      	ldr	r3, [pc, #532]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800223e:	2301      	movs	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b82      	ldr	r3, [pc, #520]	; (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224a:	2b00      	cmp	r3, #0
 800224c:	d118      	bne.n	8002280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7e      	ldr	r2, [pc, #504]	; (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225a:	f7ff faef 	bl	800183c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7ff faeb 	bl	800183c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b64      	cmp	r3, #100	; 0x64
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e103      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b75      	ldr	r3, [pc, #468]	; (800244c <HAL_RCC_OscConfig+0x4c8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x312>
 8002288:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a6e      	ldr	r2, [pc, #440]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	e02d      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x334>
 800229e:	4b6a      	ldr	r3, [pc, #424]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a69      	ldr	r2, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b67      	ldr	r3, [pc, #412]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a66      	ldr	r2, [pc, #408]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	e01c      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0x356>
 80022c0:	4b61      	ldr	r3, [pc, #388]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4a60      	ldr	r2, [pc, #384]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6213      	str	r3, [r2, #32]
 80022cc:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0x36e>
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a5a      	ldr	r2, [pc, #360]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fa9f 	bl	800183c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff fa9b 	bl	800183c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0b1      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	4b4b      	ldr	r3, [pc, #300]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ee      	beq.n	8002302 <HAL_RCC_OscConfig+0x37e>
 8002324:	e014      	b.n	8002350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7ff fa89 	bl	800183c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff fa85 	bl	800183c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e09b      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	4b40      	ldr	r3, [pc, #256]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002356:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8087 	beq.w	800247a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d061      	beq.n	800243c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d146      	bne.n	800240e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b33      	ldr	r3, [pc, #204]	; (8002450 <HAL_RCC_OscConfig+0x4cc>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff fa59 	bl	800183c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff fa55 	bl	800183c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e06d      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4921      	ldr	r1, [pc, #132]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c8:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a19      	ldr	r1, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	430b      	orrs	r3, r1
 80023da:	491b      	ldr	r1, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fa29 	bl	800183c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff fa25 	bl	800183c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e03d      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x46a>
 800240c:	e035      	b.n	800247a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_RCC_OscConfig+0x4cc>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff fa12 	bl	800183c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff fa0e 	bl	800183c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e026      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x498>
 800243a:	e01e      	b.n	800247a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e019      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
 8002448:	40021000 	.word	0x40021000
 800244c:	40007000 	.word	0x40007000
 8002450:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x500>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	429a      	cmp	r2, r3
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0d0      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d910      	bls.n	80024cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4965      	ldr	r1, [pc, #404]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a58      	ldr	r2, [pc, #352]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002506:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d040      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d115      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e073      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002556:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e06b      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f023 0203 	bic.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4936      	ldr	r1, [pc, #216]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002578:	f7ff f960 	bl	800183c <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	e00a      	b.n	8002596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002580:	f7ff f95c 	bl	800183c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e053      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 020c 	and.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1eb      	bne.n	8002580 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d210      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4922      	ldr	r1, [pc, #136]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002616:	f000 f821 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1cc>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff f8be 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	08004700 	.word	0x08004700
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x30>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x36>
 800268a:	e027      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800268e:	613b      	str	r3, [r7, #16]
      break;
 8002690:	e027      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	0c5b      	lsrs	r3, r3, #17
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	fb03 f202 	mul.w	r2, r3, r2
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e004      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	613b      	str	r3, [r7, #16]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026de:	613b      	str	r3, [r7, #16]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	693b      	ldr	r3, [r7, #16]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	007a1200 	.word	0x007a1200
 80026f8:	08004718 	.word	0x08004718
 80026fc:	08004728 	.word	0x08004728
 8002700:	003d0900 	.word	0x003d0900

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_RCC_GetHCLKFreq+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000000 	.word	0x20000000

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800271c:	f7ff fff2 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08004710 	.word	0x08004710

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffde 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08004710 	.word	0x08004710

08002768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <RCC_Delay+0x34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <RCC_Delay+0x38>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002784:	bf00      	nop
  }
  while (Delay --);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <RCC_Delay+0x1c>
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	20000000 	.word	0x20000000
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e076      	b.n	80028a4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c6:	d009      	beq.n	80027dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
 80027ce:	e005      	b.n	80027dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fe04 	bl	8001404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002812:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	ea42 0103 	orr.w	r1, r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	0c1a      	lsrs	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f002 0204 	and.w	r2, r2, #4
 8002882:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002892:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	; 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028ba:	2301      	movs	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x26>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e198      	b.n	8002c04 <HAL_SPI_TransmitReceive+0x358>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028da:	f7fe ffaf 	bl	800183c <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028f0:	887b      	ldrh	r3, [r7, #2]
 80028f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d00f      	beq.n	800291c <HAL_SPI_TransmitReceive+0x70>
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002902:	d107      	bne.n	8002914 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_SPI_TransmitReceive+0x68>
 800290c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002910:	2b04      	cmp	r3, #4
 8002912:	d003      	beq.n	800291c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002914:	2302      	movs	r3, #2
 8002916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800291a:	e16d      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_SPI_TransmitReceive+0x82>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_SPI_TransmitReceive+0x82>
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002934:	e160      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b04      	cmp	r3, #4
 8002940:	d003      	beq.n	800294a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2205      	movs	r2, #5
 8002946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	887a      	ldrh	r2, [r7, #2]
 800295a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	887a      	ldrh	r2, [r7, #2]
 8002972:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d007      	beq.n	800299e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a6:	d17c      	bne.n	8002aa2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_TransmitReceive+0x10a>
 80029b0:	8b7b      	ldrh	r3, [r7, #26]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d16a      	bne.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029da:	e057      	b.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d11b      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x176>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d016      	beq.n	8002a22 <HAL_SPI_TransmitReceive+0x176>
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d113      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	1c9a      	adds	r2, r3, #2
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d119      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x1b8>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d014      	beq.n	8002a64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	b292      	uxth	r2, r2
 8002a46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a60:	2301      	movs	r3, #1
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a64:	f7fe feea 	bl	800183c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d80b      	bhi.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d007      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a8a:	e0b5      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1a2      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x130>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d19d      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x130>
 8002aa0:	e080      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x204>
 8002aaa:	8b7b      	ldrh	r3, [r7, #26]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d16f      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad6:	e05b      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d11c      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x274>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_SPI_TransmitReceive+0x274>
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d114      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d119      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x2b6>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d014      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b62:	f7fe fe6b 	bl	800183c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d803      	bhi.n	8002b7a <HAL_SPI_TransmitReceive+0x2ce>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d102      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x2d4>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002b8e:	e033      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d19e      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x22c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d199      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f9b3 	bl	8002f14 <SPI_EndRxTxTransaction>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002bc0:	e01a      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bee:	e003      	b.n	8002bf8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3730      	adds	r7, #48	; 0x30
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d004      	beq.n	8002c4c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
    return;
 8002c4a:	e0b7      	b.n	8002dbc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HAL_SPI_IRQHandler+0x5e>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    return;
 8002c68:	e0a8      	b.n	8002dbc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_SPI_IRQHandler+0x74>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 809e 	beq.w	8002dbc <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8098 	beq.w	8002dbc <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d023      	beq.n	8002cde <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d011      	beq.n	8002cc6 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f043 0204 	orr.w	r2, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	e00b      	b.n	8002cde <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]
        return;
 8002cdc:	e06e      	b.n	8002dbc <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d014      	beq.n	8002d12 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04f      	beq.n	8002dba <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_SPI_IRQHandler+0x13a>
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d034      	beq.n	8002db0 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0203 	bic.w	r2, r2, #3
 8002d54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d011      	beq.n	8002d82 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_SPI_IRQHandler+0x1b8>)
 8002d64:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fedc 	bl	8001b28 <HAL_DMA_Abort_IT>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8e:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <HAL_SPI_IRQHandler+0x1b8>)
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fec6 	bl	8001b28 <HAL_DMA_Abort_IT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002dae:	e003      	b.n	8002db8 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f809 	bl	8002dc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002db6:	e000      	b.n	8002dba <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002db8:	bf00      	nop
    return;
 8002dba:	bf00      	nop
  }
}
 8002dbc:	3720      	adds	r7, #32
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	08002ddb 	.word	0x08002ddb

08002dc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff ffe7 	bl	8002dc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e14:	f7fe fd12 	bl	800183c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e24:	f7fe fd0a 	bl	800183c <HAL_GetTick>
 8002e28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	015b      	lsls	r3, r3, #5
 8002e30:	0d1b      	lsrs	r3, r3, #20
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3a:	e054      	b.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d050      	beq.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e44:	f7fe fcfa 	bl	800183c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d902      	bls.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d13d      	bne.n	8002ed6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e72:	d111      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e7c:	d004      	beq.n	8002e88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d107      	bne.n	8002e98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea0:	d10f      	bne.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e017      	b.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d19b      	bne.n	8002e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000000 	.word	0x20000000

08002f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2200      	movs	r2, #0
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7ff ff6a 	bl	8002e04 <SPI_WaitFlagStateUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e000      	b.n	8002f48 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e041      	b.n	8002fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fe faa6 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f000 faa2 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d001      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e03a      	b.n	800307e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_TIM_Base_Start_IT+0x98>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x58>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003032:	d009      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x58>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_TIM_Base_Start_IT+0x9c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x58>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a13      	ldr	r2, [pc, #76]	; (8003090 <HAL_TIM_Base_Start_IT+0xa0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d111      	bne.n	800306c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b06      	cmp	r3, #6
 8003058:	d010      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306a:	e007      	b.n	800307c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800

08003094 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10f      	bne.n	80030dc <HAL_TIM_Base_Stop_IT+0x48>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	f240 4344 	movw	r3, #1092	; 0x444
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_Base_Stop_IT+0x48>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0202 	mvn.w	r2, #2
 800311c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9b4 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f9a7 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f9b6 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0204 	mvn.w	r2, #4
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f98a 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f97d 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f98c 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0208 	mvn.w	r2, #8
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2204      	movs	r2, #4
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f960 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f953 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f962 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0210 	mvn.w	r2, #16
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2208      	movs	r2, #8
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f936 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f929 	bl	800348e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f938 	bl	80034b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10e      	bne.n	8003274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0201 	mvn.w	r2, #1
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fcea 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b80      	cmp	r3, #128	; 0x80
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b80      	cmp	r3, #128	; 0x80
 800328e:	d107      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fa7b 	bl	8003796 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	d10e      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d107      	bne.n	80032cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8fc 	bl	80034c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d10e      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d107      	bne.n	80032f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0220 	mvn.w	r2, #32
 80032f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa46 	bl	8003784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_TIM_ConfigClockSource+0x1c>
 8003318:	2302      	movs	r3, #2
 800331a:	e0b4      	b.n	8003486 <HAL_TIM_ConfigClockSource+0x186>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003354:	d03e      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335a:	f200 8087 	bhi.w	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	f000 8086 	beq.w	8003472 <HAL_TIM_ConfigClockSource+0x172>
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d87f      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b70      	cmp	r3, #112	; 0x70
 800336e:	d01a      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003370:	2b70      	cmp	r3, #112	; 0x70
 8003372:	d87b      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b60      	cmp	r3, #96	; 0x60
 8003376:	d050      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x11a>
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d877      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b50      	cmp	r3, #80	; 0x50
 800337e:	d03c      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xfa>
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	d873      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d058      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x13a>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d86f      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b30      	cmp	r3, #48	; 0x30
 800338e:	d064      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d86b      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b20      	cmp	r3, #32
 8003396:	d060      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d867      	bhi.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05c      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d05a      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	e062      	b.n	800346c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033b6:	f000 f968 	bl	800368a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	609a      	str	r2, [r3, #8]
      break;
 80033d2:	e04f      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033e4:	f000 f951 	bl	800368a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e03c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	461a      	mov	r2, r3
 8003408:	f000 f8c8 	bl	800359c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2150      	movs	r1, #80	; 0x50
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f91f 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 8003418:	e02c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003426:	461a      	mov	r2, r3
 8003428:	f000 f8e6 	bl	80035f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2160      	movs	r1, #96	; 0x60
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f90f 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 8003438:	e01c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	461a      	mov	r2, r3
 8003448:	f000 f8a8 	bl	800359c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2140      	movs	r1, #64	; 0x40
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f8ff 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 8003458:	e00c      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f000 f8f6 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 800346a:	e003      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      break;
 8003470:	e000      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
	...

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a29      	ldr	r2, [pc, #164]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a07      	ldr	r2, [pc, #28]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	615a      	str	r2, [r3, #20]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800

0800359c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f023 0201 	bic.w	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 030a 	bic.w	r3, r3, #10
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f023 0210 	bic.w	r2, r3, #16
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	621a      	str	r2, [r3, #32]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	f043 0307 	orr.w	r3, r3, #7
 8003678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800368a:	b480      	push	{r7}
 800368c:	b087      	sub	sp, #28
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e046      	b.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a16      	ldr	r2, [pc, #88]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d009      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a10      	ldr	r2, [pc, #64]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10c      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800

08003784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e042      	b.n	8003840 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fed6 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	; 0x24
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fec1 	bl	8004574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e04a      	b.n	80038f0 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fe86 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fe71 	bl	8004574 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80038b0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0208 	orr.w	r2, r2, #8
 80038c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d16d      	bne.n	80039f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_UART_Transmit+0x2c>
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e066      	b.n	80039f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2221      	movs	r2, #33	; 0x21
 8003932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003936:	f7fd ff81 	bl	800183c <HAL_GetTick>
 800393a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d108      	bne.n	8003964 <HAL_UART_Transmit+0x6c>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e003      	b.n	800396c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800396c:	e02a      	b.n	80039c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fbf1 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e036      	b.n	80039f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3302      	adds	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e007      	b.n	80039b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1cf      	bne.n	800396e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fbc1 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e006      	b.n	80039f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e000      	b.n	80039f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b08a      	sub	sp, #40	; 0x28
 8003a02:	af02      	add	r7, sp, #8
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d17c      	bne.n	8003b18 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_UART_Receive+0x2c>
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e075      	b.n	8003b1a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2222      	movs	r2, #34	; 0x22
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a42:	f7fd fefb 	bl	800183c <HAL_GetTick>
 8003a46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	88fa      	ldrh	r2, [r7, #6]
 8003a4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d108      	bne.n	8003a70 <HAL_UART_Receive+0x72>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e003      	b.n	8003a78 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a78:	e043      	b.n	8003b02 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2120      	movs	r1, #32
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fb6b 	bl	8004160 <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e042      	b.n	8003b1a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10c      	bne.n	8003ab4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	3302      	adds	r3, #2
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e01f      	b.n	8003af4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abc:	d007      	beq.n	8003ace <HAL_UART_Receive+0xd0>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_UART_Receive+0xde>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e008      	b.n	8003aee <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1b6      	bne.n	8003a7a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b0ba      	sub	sp, #232	; 0xe8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_UART_IRQHandler+0x66>
 8003b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fc37 	bl	80043f6 <UART_Receive_IT>
      return;
 8003b88:	e25b      	b.n	8004042 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80de 	beq.w	8003d50 <HAL_UART_IRQHandler+0x22c>
 8003b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80d1 	beq.w	8003d50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xae>
 8003bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xd2>
 8003bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_UART_IRQHandler+0xf6>
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <HAL_UART_IRQHandler+0x126>
 8003c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f043 0208 	orr.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 81f2 	beq.w	8004038 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_UART_IRQHandler+0x14e>
 8003c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fbc2 	bl	80043f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d103      	bne.n	8003c9e <HAL_UART_IRQHandler+0x17a>
 8003c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d04f      	beq.n	8003d3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 facc 	bl	800423c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d041      	beq.n	8003d36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1d9      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d013      	beq.n	8003d2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0a:	4a7e      	ldr	r2, [pc, #504]	; (8003f04 <HAL_UART_IRQHandler+0x3e0>)
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd ff08 	bl	8001b28 <HAL_DMA_Abort_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e00e      	b.n	8003d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f99c 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	e00a      	b.n	8003d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f998 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e006      	b.n	8003d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f994 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003d4a:	e175      	b.n	8004038 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	bf00      	nop
    return;
 8003d4e:	e173      	b.n	8004038 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 814f 	bne.w	8003ff8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8148 	beq.w	8003ff8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8141 	beq.w	8003ff8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80b6 	beq.w	8003f08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003da8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8145 	beq.w	800403c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	f080 813e 	bcs.w	800403c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	f000 8088 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1d9      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e1      	bne.n	8003e20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e3      	bne.n	8003e5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb4:	f023 0310 	bic.w	r3, r3, #16
 8003eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ec6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ec8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ecc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e3      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd fde7 	bl	8001ab2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8bf 	bl	800407e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f00:	e09c      	b.n	800403c <HAL_UART_IRQHandler+0x518>
 8003f02:	bf00      	nop
 8003f04:	08004301 	.word	0x08004301
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 808e 	beq.w	8004040 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8089 	beq.w	8004040 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f52:	647a      	str	r2, [r7, #68]	; 0x44
 8003f54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e3      	bne.n	8003f2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	623b      	str	r3, [r7, #32]
   return(result);
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e3      	bne.n	8003f66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0310 	bic.w	r3, r3, #16
 8003fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fd0:	61fa      	str	r2, [r7, #28]
 8003fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e3      	bne.n	8003fac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f844 	bl	800407e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ff6:	e023      	b.n	8004040 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <HAL_UART_IRQHandler+0x4f4>
 8004004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f989 	bl	8004328 <UART_Transmit_IT>
    return;
 8004016:	e014      	b.n	8004042 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00e      	beq.n	8004042 <HAL_UART_IRQHandler+0x51e>
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f9c8 	bl	80043c6 <UART_EndTransmit_IT>
    return;
 8004036:	e004      	b.n	8004042 <HAL_UART_IRQHandler+0x51e>
    return;
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <HAL_UART_IRQHandler+0x51e>
      return;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_UART_IRQHandler+0x51e>
      return;
 8004040:	bf00      	nop
  }
}
 8004042:	37e8      	adds	r7, #232	; 0xe8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e020      	b.n	80040f0 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2224      	movs	r2, #36	; 0x24
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 030c 	bic.w	r3, r3, #12
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f043 0308 	orr.w	r3, r3, #8
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004110:	2302      	movs	r3, #2
 8004112:	e020      	b.n	8004156 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 030c 	bic.w	r3, r3, #12
 8004132:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b090      	sub	sp, #64	; 0x40
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004170:	e050      	b.n	8004214 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d04c      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800417a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <UART_WaitOnFlagUntilTimeout+0x30>
 8004180:	f7fd fb5c 	bl	800183c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800418c:	429a      	cmp	r2, r3
 800418e:	d241      	bcs.n	8004214 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041b0:	637a      	str	r2, [r7, #52]	; 0x34
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	613b      	str	r3, [r7, #16]
   return(result);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041e4:	623a      	str	r2, [r7, #32]
 80041e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	69f9      	ldr	r1, [r7, #28]
 80041ea:	6a3a      	ldr	r2, [r7, #32]
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e5      	bne.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e00f      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	429a      	cmp	r2, r3
 8004230:	d09f      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3740      	adds	r7, #64	; 0x40
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b095      	sub	sp, #84	; 0x54
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004264:	643a      	str	r2, [r7, #64]	; 0x40
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800426a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	61fb      	str	r3, [r7, #28]
   return(result);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004298:	62fa      	str	r2, [r7, #44]	; 0x2c
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800429e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d119      	bne.n	80042e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0310 	bic.w	r3, r3, #16
 80042ca:	647b      	str	r3, [r7, #68]	; 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d4:	61ba      	str	r2, [r7, #24]
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	613b      	str	r3, [r7, #16]
   return(result);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042f6:	bf00      	nop
 80042f8:	3754      	adds	r7, #84	; 0x54
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fea6 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b21      	cmp	r3, #33	; 0x21
 800433a:	d13e      	bne.n	80043ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d114      	bne.n	8004370 <UART_Transmit_IT+0x48>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d110      	bne.n	8004370 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004362:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	1c9a      	adds	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]
 800436e:	e008      	b.n	8004382 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	1c59      	adds	r1, r3, #1
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6211      	str	r1, [r2, #32]
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4619      	mov	r1, r3
 8004390:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10f      	bne.n	80043b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fe2e 	bl	8004048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08c      	sub	sp, #48	; 0x30
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b22      	cmp	r3, #34	; 0x22
 8004408:	f040 80ae 	bne.w	8004568 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d117      	bne.n	8004446 <UART_Receive_IT+0x50>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d113      	bne.n	8004446 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b29b      	uxth	r3, r3
 8004430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004434:	b29a      	uxth	r2, r3
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28
 8004444:	e026      	b.n	8004494 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800444c:	2300      	movs	r3, #0
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d007      	beq.n	800446a <UART_Receive_IT+0x74>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <UART_Receive_IT+0x82>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e008      	b.n	800448a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004484:	b2da      	uxtb	r2, r3
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4619      	mov	r1, r3
 80044a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d15d      	bne.n	8004564 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0220 	bic.w	r2, r2, #32
 80044b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d135      	bne.n	800455a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	613b      	str	r3, [r7, #16]
   return(result);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 0310 	bic.w	r3, r3, #16
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	623a      	str	r2, [r7, #32]
 8004516:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	69f9      	ldr	r1, [r7, #28]
 800451a:	6a3a      	ldr	r2, [r7, #32]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	61bb      	str	r3, [r7, #24]
   return(result);
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e5      	bne.n	80044f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d10a      	bne.n	800454c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fd93 	bl	800407e <HAL_UARTEx_RxEventCallback>
 8004558:	e002      	b.n	8004560 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff fd7d 	bl	800405a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e002      	b.n	800456a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e000      	b.n	800456a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004568:	2302      	movs	r3, #2
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3730      	adds	r7, #48	; 0x30
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045ae:	f023 030c 	bic.w	r3, r3, #12
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2c      	ldr	r2, [pc, #176]	; (8004688 <UART_SetConfig+0x114>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe f8b0 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	e002      	b.n	80045ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045e4:	f7fe f898 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 80045e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009a      	lsls	r2, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	4a22      	ldr	r2, [pc, #136]	; (800468c <UART_SetConfig+0x118>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	0119      	lsls	r1, r3, #4
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009a      	lsls	r2, r3, #2
 8004614:	441a      	add	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <UART_SetConfig+0x118>)
 8004622:	fba3 0302 	umull	r0, r3, r3, r2
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	2064      	movs	r0, #100	; 0x64
 800462a:	fb00 f303 	mul.w	r3, r0, r3
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	3332      	adds	r3, #50	; 0x32
 8004634:	4a15      	ldr	r2, [pc, #84]	; (800468c <UART_SetConfig+0x118>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004640:	4419      	add	r1, r3
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009a      	lsls	r2, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	fbb2 f2f3 	udiv	r2, r2, r3
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <UART_SetConfig+0x118>)
 800465a:	fba3 0302 	umull	r0, r3, r3, r2
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2064      	movs	r0, #100	; 0x64
 8004662:	fb00 f303 	mul.w	r3, r0, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	3332      	adds	r3, #50	; 0x32
 800466c:	4a07      	ldr	r2, [pc, #28]	; (800468c <UART_SetConfig+0x118>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	440a      	add	r2, r1
 800467e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40013800 	.word	0x40013800
 800468c:	51eb851f 	.word	0x51eb851f

08004690 <memset>:
 8004690:	4603      	mov	r3, r0
 8004692:	4402      	add	r2, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <__libc_init_array>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	2600      	movs	r6, #0
 80046a4:	4d0c      	ldr	r5, [pc, #48]	; (80046d8 <__libc_init_array+0x38>)
 80046a6:	4c0d      	ldr	r4, [pc, #52]	; (80046dc <__libc_init_array+0x3c>)
 80046a8:	1b64      	subs	r4, r4, r5
 80046aa:	10a4      	asrs	r4, r4, #2
 80046ac:	42a6      	cmp	r6, r4
 80046ae:	d109      	bne.n	80046c4 <__libc_init_array+0x24>
 80046b0:	f000 f81a 	bl	80046e8 <_init>
 80046b4:	2600      	movs	r6, #0
 80046b6:	4d0a      	ldr	r5, [pc, #40]	; (80046e0 <__libc_init_array+0x40>)
 80046b8:	4c0a      	ldr	r4, [pc, #40]	; (80046e4 <__libc_init_array+0x44>)
 80046ba:	1b64      	subs	r4, r4, r5
 80046bc:	10a4      	asrs	r4, r4, #2
 80046be:	42a6      	cmp	r6, r4
 80046c0:	d105      	bne.n	80046ce <__libc_init_array+0x2e>
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c8:	4798      	blx	r3
 80046ca:	3601      	adds	r6, #1
 80046cc:	e7ee      	b.n	80046ac <__libc_init_array+0xc>
 80046ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d2:	4798      	blx	r3
 80046d4:	3601      	adds	r6, #1
 80046d6:	e7f2      	b.n	80046be <__libc_init_array+0x1e>
 80046d8:	0800472c 	.word	0x0800472c
 80046dc:	0800472c 	.word	0x0800472c
 80046e0:	0800472c 	.word	0x0800472c
 80046e4:	08004734 	.word	0x08004734

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
